#!/usr/bin/env node

/**
 * Module dependencies.
 */

const fs = require('fs')
const logConfig = require('../config/log_config')

/**
 * 确定目录是否存在，如果不存在则创建目录
 */
const confirmPath = (pathStr) => {
  if (!fs.existsSync(pathStr)) {
    fs.mkdirSync(pathStr)
    console.log(`createPath: ${pathStr}`)
  }
}

/**
 * 初始化log相关目录
 */
const initLogPath = () => {
  // 创建log的根目录'logs'
  if (logConfig.baseLogPath) {
    const { appenders } = logConfig
    confirmPath(logConfig.baseLogPath)
    Object.keys(appenders).forEach((item) => {
      if (appenders[item].path) confirmPath(`${logConfig.baseLogPath}${appenders[item].path}`)
    })
  }
}

initLogPath()

const app = require('../app')
const debug = require('debug')('demo:server')
const http = require('http')

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (Number.isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Get port from environment and store in Express.
 */

const PORT = normalizePort(process.env.PORT || '3000')
// app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback())


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof PORT === 'string'
    ? `Pipe ${PORT}`
    : `Port ${PORT}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  debug(`Listening on ${bind}`)
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(PORT)
server.on('error', onError)
server.on('listening', onListening)

